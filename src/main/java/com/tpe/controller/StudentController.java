package com.tpe.controller;

import com.tpe.domain.Student;
import com.tpe.dto.StudentDTO;
import com.tpe.service.StudentService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/students")  //  => http://localhost:8088/students
public class StudentController
    {
        Logger logger = LoggerFactory.getLogger(StudentController.class);

        @Autowired
        private StudentService studentService;

        // Get All Students
        @GetMapping //  => http://localhost:8088/students + GET
        public ResponseEntity<List<Student>> getAll()
        {
            List<Student> students = studentService.getAll();

            return ResponseEntity.ok(students); // 200 kodunu HTTP Status kodu olarak gönderir
        }

        // Student objesi olusturalim

        @PostMapping  //  => http://localhost:8088/students + POST + JSON      POST (create islemleri icin kullanilir.)
        public ResponseEntity<Map<String,String>> createStudent(@Valid @RequestBody Student student)
        {
            // @Valid : parametreler valid mi kontrol eder, bu örenekte Student
            //objesi oluşturmak için  gönderilen fieldlar yani
            //name gibi özellikler düzgün set edilmiş mi ona bakar.
            // @RequestBody = gelen parametreyi, requestin bodysindeki bilgisi ,
            //Student objesine map edilmesini sağlıyor.

            studentService.createStudent(student);

            Map<String, String> map = new HashMap<>();
            map.put("message", "Student is created successfully");
            map.put("status", "true");
            return new ResponseEntity<>(map, HttpStatus.CREATED);//201
        }

        // id ile ogrenci cagiralim ReuquestParam ile (daha fazla variable alacaksam daha mantikli)
        //mapleme olmadigi icin parametre siralamasi onemli degildir.

        @GetMapping("/query")  //http://localhost:8088/students/query?id=1
        public ResponseEntity<Student> getStudent(@RequestParam("id") Long id)
        {
           Student student = studentService.findStudent(id);
           return ResponseEntity.ok(student);
        }

        // id ile ögrenci getirelim  @PathVariable ile   (Tek bir variable alacaksam  daha mantikli)
        //maplame mantigi oldugu icin paramaetre siralamasi dogru giilmesi gerekir

        @GetMapping("{id}") //http://localhost:8088/students/1 + GET
        public ResponseEntity<Student> getStudentWithPath(@PathVariable("id") Long id)
        {
            Student student = studentService.findStudent(id);
            return ResponseEntity.ok(student);
        }

        //Delete
        @DeleteMapping("/{id}")  //http://localhost:8088/students/1 + DELETE
        public ResponseEntity<Map<String, String>> deleteStudent(@PathVariable("id") Long id)
        {
            studentService.deleteStudent(id);

            Map<String, String> map = new HashMap<>();
            map.put("message", "Student is deleted successfully");
            map.put("status", "true");
            return new ResponseEntity<>(map, HttpStatus.OK);//201   return ResponseEntity.ok(map);
        }

        // update
        @PutMapping("{id}") //http://localhost:8088/students/1 + PUT
        public ResponseEntity<Map<String, String>> updateStudent(@PathVariable("id") Long id, @Valid
                                                                 @RequestBody StudentDTO studentDTO)
        {
            studentService.updateStudent(id, studentDTO);

            Map<String, String> map = new HashMap<>();
            map.put("message", "Student is updated successfully");
            map.put("status", "true");
            return new ResponseEntity<>(map, HttpStatus.OK);//201   return ResponseEntity.ok(map);

        }
        // Pageble

        @GetMapping("/page")
        public ResponseEntity<Page<Student>> getAllWithPage(@RequestParam("page") int page, // hangi page gonderilecek
                                                            @RequestParam("size") int size, // page basi hangi studemt olacak
                                                            @RequestParam("sort") String prop, // siralama hangi field da gore yapilcak
                                                            @RequestParam("direction")Sort.Direction direction) // dogal sirali mi olsun?
        {
            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, prop));
            Page<Student> studentPage = studentService.getAllWithPage(pageable);
            return ResponseEntity.ok(studentPage);
        }

        // Get by lastname
        @GetMapping("/querylastname")    //http://localhost:8088/students/querylastname
        public ResponseEntity<List<Student>> getStudentByLastName(@RequestParam("lastName") String lastName)
        {
            List<Student> list = studentService.findStudent(lastName);

            return ResponseEntity.ok(list);
        }

        // Get All Student By grade (JPQL) Java Persistance (kalici) Query Language
        @GetMapping("/grade/{grade}") //http://localhost:8088/students/grade/75 + GET
        public ResponseEntity<List<Student>> getStudentsEqualsGrade(@PathVariable("grade") Integer grade)
        {
            List<Student> list = studentService.findAllEqualsGrade(grade);
            return ResponseEntity.ok(list);
        }

        //DB den direk DTO olarak data alabilir miyim?

        @GetMapping("/query/dto") //http://localhost:8088/students/query/dto?id=1
        public ResponseEntity<StudentDTO> getStudentDTO(@RequestParam("id") Long id)
        {
           StudentDTO studentDTO = studentService.findStudentDTOById(id);
            return ResponseEntity.ok(studentDTO);
        }

        @GetMapping("/welcome") //http://localhost:8088/students/welcome + GET
        public String welcome(HttpServletRequest request)  // HttpServletRequest ile request e ulastim
        {
            logger.warn("---------------------------Welcome {}", request.getServletPath());
            return "Welcome Developers";
        }


    }
